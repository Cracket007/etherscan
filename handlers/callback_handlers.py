from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timezone, timedelta
import logging

def get_period_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞"""
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üíé ETH", callback_data="type_eth"),
        InlineKeyboardButton("üíµ USDT", callback_data="type_usdt")
    )
    return markup

def get_time_period_keyboard(token_type):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", callback_data=f"period_{token_type}_month"),
        InlineKeyboardButton("‚ôæ –í—Å–µ –≤—Ä–µ–º—è", callback_data=f"period_{token_type}_all")
    )
    markup.row(InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data=f"period_{token_type}_custom"))
    markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_tokens"))
    return markup

def get_custom_period_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_periods"))
    return markup

def process_custom_period(bot, message, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        chat_id = message.chat.id
        text = message.text.strip()
        
        try:
            start_date_str, end_date_str = text.split()
            start_date = datetime.strptime(start_date_str, '%d.%m.%Y')
            end_date = datetime.strptime(end_date_str, '%d.%m.%Y')
            end_date = end_date.replace(hour=23, minute=59, second=59)
            
            if end_date > datetime.now():
                bot.reply_to(message, "‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
                return
                
            if start_date > end_date:
                bot.reply_to(message, "‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π")
                return
                
            wallet = db.get_user_wallet(chat_id)
            token_type = db.get_user_token(chat_id)
            
            if not wallet:
                bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞")
                return
                
            status_message = bot.reply_to(
                message,
                f"‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date_str} - {end_date_str}..."
            )
            
            start_timestamp = int(start_date.timestamp())
            end_timestamp = int(end_date.timestamp())
            period_str = f"–∑–∞ {start_date_str} - {end_date_str}"
            
            if token_type == 'eth':
                from main import process_eth_request
                process_eth_request(chat_id, wallet, start_timestamp, end_timestamp, period_str, status_message.message_id)
            else:
                from main import process_usdt_request
                process_usdt_request(chat_id, wallet, start_timestamp, end_timestamp, period_str, status_message.message_id)
            
            db.update_user_state(chat_id, None)
            
        except ValueError:
            bot.reply_to(
                message,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2023 31.12.2023"
            )
            
    except Exception as e:
        logging.error(f"Error in process_custom_period: {str(e)}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}")

def handle_callback(bot, call, db):
    try:
        chat_id = call.message.chat.id
        wallet = db.get_user_wallet(chat_id)
        
        if call.data == "back_to_tokens":
            db.update_user_state(chat_id, None)
            markup = get_period_keyboard()
            bot.edit_message_text(
                "üí± –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                chat_id,
                call.message.message_id,
                reply_markup=markup
            )
            return
            
        if call.data == "back_to_periods":
            db.update_user_state(chat_id, None)
            token_type = db.get_user_token(chat_id)
            if not token_type:
                token_type = 'eth'
            markup = get_time_period_keyboard(token_type)
            emoji = "üî∑" if token_type == 'eth' else "üíé"
            
            bot.edit_message_text(
                f"{emoji} –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {token_type.upper()} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
                chat_id,
                call.message.message_id,
                reply_markup=markup
            )
            return

        if call.data.startswith('type_'):
            token_type = call.data.split('_')[1]
            db.update_user_token(chat_id, token_type)
            markup = get_time_period_keyboard(token_type)
            emoji = "üî∑" if token_type == 'eth' else "üíé"
            
            bot.edit_message_text(
                f"{emoji} –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {token_type.upper()} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
                chat_id,
                call.message.message_id,
                reply_markup=markup
            )
            return

        if call.data.startswith('period_'):
            parts = call.data.split('_')
            token_type = parts[1]
            period = parts[2]
            
            if period == 'custom':
                db.update_user_state(chat_id, 'waiting_period')
                markup = get_custom_period_keyboard()
                bot.edit_message_text(
                    "üìÖ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "–î–î.–ú–ú.–ì–ì–ì–ì –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2023 31.12.2023",
                    chat_id,
                    call.message.message_id,
                    reply_markup=markup
                )
                return

            now = datetime.now(timezone.utc)
            end_timestamp = int(now.timestamp())
            
            if period == 'all':
                start_timestamp = None
                period_str = "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
            else:
                start_timestamp = int((now - timedelta(days=30)).timestamp())
                period_str = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"

            try:
                bot.edit_message_text(
                    "‚è≥ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...",
                    chat_id,
                    call.message.message_id
                )
                
                if token_type == 'eth':
                    from main import process_eth_request
                    process_eth_request(chat_id, wallet, start_timestamp, end_timestamp, period_str, call.message.message_id)
                else:
                    from main import process_usdt_request
                    process_usdt_request(chat_id, wallet, start_timestamp, end_timestamp, period_str, call.message.message_id)
                    
            except Exception as e:
                bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}",
                    chat_id,
                    call.message.message_id
                )

        bot.answer_callback_query(call.id)
            
    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
