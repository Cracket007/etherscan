import requests
from datetime import datetime
from etherscan import Etherscan
from usdt_handler import get_usdt_balance, process_usdt_transactions, get_usdt_price
from telebot import types

def get_wallet_balances(eth_client, wallet_address):
    try:
        eth_balance = float(eth_client.get_eth_balance(wallet_address)) / 10**18
        usdt_balance = get_usdt_balance(eth_client, wallet_address)
        return eth_balance, usdt_balance
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {str(e)}")
        return None, None

def get_wallet_balances_at_date(eth_client, wallet_address, target_date):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã ETH –∏ USDT –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å ETH
        current_eth_balance = float(eth_client.get_eth_balance(wallet_address)) / 10**18
        current_usdt_balance = get_usdt_balance(eth_client, wallet_address)
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ETH –∏ USDT
        eth_txs = eth_client.get_normal_txs_by_address(
            address=wallet_address,
            startblock=0,
            endblock=99999999,
            sort='asc'
        )
        
        usdt_txs = process_usdt_transactions(eth_client, wallet_address)
        
        if not eth_txs and not usdt_txs:
            return current_eth_balance, current_usdt_balance
        
        # 3. –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        target_timestamp = int(target_date.timestamp())
        future_eth_txs = [tx for tx in eth_txs if int(tx['timeStamp']) > target_timestamp]
        future_usdt_txs = [tx for tx in usdt_txs if tx['timestamp'] > target_timestamp]
        
        # 4. –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å ETH –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        eth_balance = current_eth_balance
        for tx in future_eth_txs:
            try:
                if tx['from'].lower() == wallet_address.lower():
                    value = float(tx['value']) / 10**18
                    gas_price = float(tx['gasPrice'])
                    gas_used = float(tx['gasUsed'])
                    fee = (gas_price * gas_used) / 10**18
                    
                    eth_balance += value  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ ETH
                    eth_balance += fee    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
                    
                if tx['to'].lower() == wallet_address.lower():
                    value = float(tx['value']) / 10**18
                    eth_balance -= value  # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ ETH
            except Exception:
                continue
                
        # 5. –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å USDT –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        usdt_balance = current_usdt_balance
        for tx in future_usdt_txs:
            try:
                if tx['type'] == 'out':
                    usdt_balance += tx['amount']  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ USDT
                else:
                    usdt_balance -= tx['amount']  # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ USDT
            except Exception:
                continue
        
        return eth_balance, usdt_balance
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {str(e)}")
        return None, None

def get_wallet_stats(eth_client, wallet_address):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        eth_txs = eth_client.get_normal_txs_by_address(
            address=wallet_address,
            startblock=0,
            endblock=99999999,
            sort='asc'
        )
        
        # –ü–æ–ª—É—á–∞–µ–º USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        usdt_txs = process_usdt_transactions(eth_client, wallet_address)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ETH
        eth_stats = {
            'total_in': 0,
            'total_out': 0,
            'total_fee': 0,
            'count_in': 0,
            'count_out': 0
        }
        
        for tx in eth_txs:
            try:
                value = float(tx['value']) / 10**18
                gas_price = float(tx['gasPrice'])
                gas_used = float(tx['gasUsed'])
                fee = (gas_price * gas_used) / 10**18
                
                if tx['from'].lower() == wallet_address.lower():
                    eth_stats['total_out'] += value
                    eth_stats['total_fee'] += fee
                    eth_stats['count_out'] += 1
                if tx['to'].lower() == wallet_address.lower():
                    eth_stats['total_in'] += value
                    eth_stats['count_in'] += 1
            except Exception:
                continue
                
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ USDT
        usdt_stats = {
            'total_in': 0,
            'total_out': 0,
            'count_in': 0,
            'count_out': 0
        }
        
        for tx in usdt_txs:
            try:
                if tx['type'] == 'out':
                    usdt_stats['total_out'] += tx['amount']
                    usdt_stats['count_out'] += 1
                else:
                    usdt_stats['total_in'] += tx['amount']
                    usdt_stats['count_in'] += 1
            except Exception:
                continue
                
        return eth_stats, usdt_stats
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return None, None

def setup_bot_commands(bot):
    bot.set_my_commands([
        ('start', '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'),
        ('help', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É'),
        ('balance', '–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞'),
        ('balance_at', '–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –¥–∞—Ç—É'),
        ('stats', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'),
        ('price', '–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å ETH –∏ USDT')
    ])

def register_command_handlers(bot, api_key, db):
    eth_client = Etherscan(api_key)
    setup_bot_commands(bot)
    
    @bot.message_handler(commands=['start'])
    def start(message):
        chat_id = message.chat.id
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
        db.update_user_state(chat_id, None)
        
        bot.reply_to(
            message,
            "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å Ethereum –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
    
    @bot.message_handler(commands=['help'])
    def help(message):
        bot.reply_to(message,
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å Ethereum –∫–æ—à–µ–ª—å–∫–∞\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ (ETH –∏–ª–∏ USDT)\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞\n"
            "4. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/balance - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞\n"
            "/balance_at - –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "/price - –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å ETH –∏ USDT"
        )

    @bot.message_handler(commands=['balance'])
    def balance(message):
        chat_id = message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
        wallet = db.get_user_wallet(chat_id)
        if not wallet:
            bot.reply_to(message,
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —á–∞—Ç"
            )
            return
            
        try:
            status_message = bot.reply_to(
                message, 
                f"‚è≥ –ü–æ–ª—É—á–∞—é –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞\n{wallet}..."
            )
            
            eth_balance, usdt_balance = get_wallet_balances(eth_client, wallet)
            
            if eth_balance is not None and usdt_balance is not None:
                response = (
                    f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞\n"
                    f"{wallet}:\n\n"
                    f"üî∑ ETH: {eth_balance:.4f}\n"
                    f"üíµ USDT: {usdt_balance:.2f}"
                )
            else:
                response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"
                
            bot.edit_message_text(
                text=response,
                chat_id=chat_id,
                message_id=status_message.message_id
            )
            
        except Exception as e:
            bot.edit_message_text(
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}",
                chat_id=chat_id,
                message_id=status_message.message_id
            )

    @bot.message_handler(commands=['balance_at'])
    def balance_at(message):
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        wallet = db.get_user_wallet(chat_id)
        if not wallet:
            bot.reply_to(message,
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —á–∞—Ç"
            )
            return
        
        bot.reply_to(message,
            "üìÖ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –≤ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–î–î.–ú–ú.–ì–ì–ì–ì\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023\n\n"
            "üí° –ù–µ –Ω—É–∂–Ω–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –≤ —á–∞—Ç, –∏ —è –ø–æ–∫–∞–∂—É –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É\n\n"
        )

    @bot.message_handler(commands=['price'])
    def price(message):
        try:
            status_message = bot.reply_to(
                message,
                "üí± –ü–æ–ª—É—á–∞—é —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å ETH...\n"
                "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            
            eth_price = get_eth_price()
            
            if eth_price is not None:
                response = f"üí∞ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å ETH: ${eth_price:,.2f}"
            else:
                response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞"
                
            bot.edit_message_text(
                text=response,
                chat_id=message.chat.id,
                message_id=status_message.message_id
            )
            
        except Exception as e:
            bot.reply_to(
                message,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {str(e)}"
            )

    @bot.message_handler(commands=['stats'])
    def stats(message):
        chat_id = message.chat.id
        wallet = db.get_user_wallet(chat_id)
        if not wallet:
            bot.reply_to(message,
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —á–∞—Ç"
            )
            return
            
        try:
            status_message = bot.reply_to(
                message, 
                f"‚è≥ –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞\n{wallet}..."
            )
            
            eth_stats, usdt_stats = get_wallet_stats(eth_client, wallet)
            
            if eth_stats is not None and usdt_stats is not None:
                response = (
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—à–µ–ª—å–∫–∞\n"
                    f"{wallet}\n\n"
                    f"üî∑ ETH:\n"
                    f"–ü–æ–ª—É—á–µ–Ω–æ: {eth_stats['total_in']:.4f} ({eth_stats['count_in']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n"
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {eth_stats['total_out']:.4f} ({eth_stats['count_out']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n"
                    f"–ö–æ–º–∏—Å—Å–∏–∏: {eth_stats['total_fee']:.4f}\n\n"
                    f"üíµ USDT:\n"
                    f"–ü–æ–ª—É—á–µ–Ω–æ: {usdt_stats['total_in']:.2f} ({usdt_stats['count_in']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n"
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {usdt_stats['total_out']:.2f} ({usdt_stats['count_out']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)"
                )
            else:
                response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                
            bot.edit_message_text(
                text=response,
                chat_id=chat_id,
                message_id=status_message.message_id
            )
            
        except Exception as e:
            bot.edit_message_text(
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
                chat_id=chat_id,
                message_id=status_message.message_id
            ) 

def get_eth_price():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å ETH –≤ USD"""
    try:
        response = requests.get('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd')
        return response.json()['ethereum']['usd']
    except Exception:
        return None 